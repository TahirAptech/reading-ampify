# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!


# AuthorProfile as user
type AuthorUser @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub", operations: [update, read]}
])
{
    id:ID! @primaryKey
    validated: Boolean @auth(rules: [
        {allow: groups, groups: ["Admin"]}
        {allow: owner, ownerField: "sub", operations: [read]}
    ])
    sub: String
    firstName: String
    lastName:String
    birthday: String
    email: AWSEmail
    accessDocumentation: Boolean @auth(rules: [
        {allow: groups, groups: ["Admin"]}
        {allow: owner, ownerField: "sub", operations: [read]}
    ])
    setOtherAuthor: Boolean @auth(rules: [
        {allow: groups, groups: ["Admin"]}
        {allow: owner, ownerField: "sub", operations: [read]}
    ])
    unsubscribe: Boolean
    unsubscribeData: AWSJSON
    identity: String
    phone: String
    cellPhone: String
    gender: String
    address: String
    allowDoc: Boolean
    city: String
    zip: String
    status: String
    authors: [Author] @hasMany(indexName:"byAuthorUser", fields:["id"])
    drafts: [Draft] @hasMany(indexName:"byAuthorUser", fields:["id"])
}

# Author Profile as public
type Author @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [read]}
    {allow: groups, groups: ["Author"], operations: [create]}
    {allow: owner, ownerField: "sub"}
    # {allow: public, operations: [read]}
    {allow: public, provider: iam}
])
{
    id:ID! @primaryKey
    sub: String
    name: String
    firstName: String
    email: String
    gender: String
    birthdate: AWSDate
    avatar: String
    avatarKeys: AWSJSON
    avatarTemp: AWSJSON
    avatarData: AWSJSON
    biography: AWSJSON
    homeWeight: Int
    familyWeight: Int
    categoryWeight: Int
    followCount: Int
    status: AuthorStatus @index(name: "byStatus")
    authorUserID: ID! @index(name: "byAuthorUser")
    authorUser: AuthorUser @belongsTo(fields: ["authorUserID"])
    drafts: [Draft] @hasMany(indexName:"byAuthor", fields:["id"])
    books: [Book] @hasMany(indexName:"byAuthor", fields:["id"])
    followAuthors: [FollowAuthor] @hasMany(indexName: "byAuthor", fields:["id"])
    notifyFollowers: [NotifyFollower]  @hasMany(indexName: "byAuthor", fields:["id"])
}

enum AuthorStatus {
    Public
    Draft
    Former # available if author unsubscribed and book have been purchased
}

type S3Object {
    bucket: String!
    region: String!
    key: String!
}

# Unpublished book
type Draft @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Author"], operations: [create]}
    {allow: owner, ownerField: "sub", operations: [update, read, delete]}
    {allow: public, provider: iam}
])
{
    id: ID! @primaryKey
    sub: String
    title: String
    description: String
    summary: String
    cover: AWSJSON
    coverFile: S3Object  # deprecated
    coverKeys: AWSJSON
    coverTemp: AWSJSON
    coverData: AWSJSON
    epub: AWSJSON
    epubFile: S3Object  # deprecated
    epubTempURL: String
    freeEpub: AWSJSON
    epubData: AWSJSON
    freeEpubData: AWSJSON
    freeEpubFile: S3Object  # deprecated
    status: BookStatus  @index(name: "byStatus")
    bookType: BookType @index(name: "byBookType")
    history: [AWSJSON]
    price: Float
    isbn: String
    content: AWSJSON  # deprecated
    audioPreview: AWSJSON # deprecated
    authorUserID: ID! @index(name: "byAuthorUser")
    authorUser: AuthorUser @belongsTo(fields: ["authorUserID"])
    authorID: ID @index(name: "byAuthor")
    author: Author @belongsTo(fields: ["authorID"])
    draftContents: [DraftContent] @hasMany(indexName: "byDraft", fields:["id"])
    familyID: ID @index(name: "byFamily")
    family: Family @belongsTo(fields: ["familyID"])
    categoryID: ID @index(name: "byCategory")
    category: Category @belongsTo(fields: ["categoryID"])
    subCategoryID: ID @index(name: "bySubCategory")
    subCategory: SubCategory @belongsTo(fields: ["subCategoryID"])
    books: [Book] @hasMany(indexName: "byDraft", fields:["id"])
}

enum BookType {
    Audio
    Epub
    Text
}

enum BookStatus {
    Draft
    Finalized
    PublicationWanted
    PublicationPostponed
    PublicationDeclined
    Published
    Updating
    UpdateWanted
    UpdateDeclined
    Unpublished
}

type DraftContent @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Author"], operations: [create]}
    {allow: owner, ownerField: "sub", operations: [update, read, delete]}
    {allow: public, provider: iam}
])
{
    id: ID! @primaryKey
    sub: String
    order: Int
    label: String
    title: String
    freeText: String
    freeAudio: String
    freeAudioData: AWSJSON
    adminAudioData: AWSJSON
    text: String
    audio: String
    audioFile: S3Object
    audioData: AWSJSON
    audioTempURL: String
    draftID: ID @index(name: "byDraft")
    draft: Draft @belongsTo(fields: ["draftID"])
}

# published book
type Book @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [read]}
    {allow: owner, ownerField: "sub", operations: [read, update]}
    # {allow: public, operations: [read]}
    {allow: public, provider: iam}
])
{
    id: ID! @primaryKey
    sub: String
    title: String
    description: String
    summary: String
    homeWeight: Int
    familyWeight: Int
    categoryWeight: Int
    cover: AWSJSON
    coverKeys: AWSJSON
    coverData: AWSJSON
    isbn: String
    coverFile: S3Object
    epub: AWSJSON
    freeEpub: AWSJSON
    epubData: AWSJSON
    freeEpubData: AWSJSON
    adminEpub: AWSJSON
    adminEpubData: AWSJSON
    status: BookStatus @index(name: "byBookStatus")
    bookType: BookType @index(name: "byBookType")
    rating: Float
    ratingCount: Float
    likesCount: Int
    purchasedCount: Int
    purchasedAmount: Int
    price: Float
    discount: AWSJSON
    contents: AWSJSON
    audioPreview: AWSJSON
    draftID: ID @index(name: "byDraft")
    draft: Draft @belongsTo(fields: ["draftID"])
    authorID: ID @index(name: "byAuthor")
    author: Author @belongsTo(fields: ["authorID"])
    bookContents: [BookContent] @hasMany(indexName: "byBook", fields:["id"])
    purchases: [Purchase] @hasMany(indexName: "byBook", fields:["id"])
    bookLikes: [BookLike] @hasMany(indexName: "byBook", fields:["id"])
    bookRatings: [BookRating] @hasMany(indexName: "byBook", fields:["id"])
    notifyFollowers: [NotifyFollower] @hasMany(indexName: "byBook", fields:["id"])
    familyID: ID @index(name: "byFamily")
    family: Family @belongsTo(fields: ["familyID"])
    categoryID: ID @index(name: "byCategory")
    category: Category @belongsTo(fields: ["categoryID"])
    subCategoryID: ID @index(name: "bySubCategory")
    subCategory: SubCategory @belongsTo(fields: ["subCategoryID"])

}

# published content
type BookContent @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [read]}
    {allow: owner, ownerField: "sub", operations: [read]}
    {allow: public, provider: iam}
])
{
    id: ID! @primaryKey
    sub: String
    order: Int
    label: String
    title: String
    freeText: String
    freeAudio: String
    freeAudioData: AWSJSON
    adminAudioData: AWSJSON
    text: String @auth(rules: [
        {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
        {allow: groups, groups: ["Reader"], operations: [create]}
        {allow: owner, ownerField: "sub", operations: [read]}
        {allow: public, provider: iam}
    ])
    audio: String @auth(rules: [ # deprecated
        {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
        {allow: groups, groups: ["Reader"], operations: [create]}
        {allow: owner, ownerField: "sub", operations: [read]}
        {allow: public, provider: iam}
    ])
    audioData: AWSJSON @auth(rules: [
        {allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
        {allow: groups, groups: ["Reader"], operations: [create]}
        {allow: owner, ownerField: "sub", operations: [read]}
        {allow: public, provider: iam}
    ])
    bookID: ID @index(name: "byBook")
    book: Book @belongsTo(fields: ["bookID"])
    draftContentID: ID
}


# readerProfile as user
type ReaderUser @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub", operations: [create, update, read]}
    {allow: public, provider: iam}
])
{
    id:ID! @primaryKey
    sub: String
    firstName: String
    lastName:String
    avatar: String
    avatarKeys: String
    avatarData: AWSJSON
    birthday: String
    email: AWSEmail
    phone: String
    cellPhone: String
    tokens:[Token]
    gender: String
    address: String
    city: String
    zip: String
    country: String
    status: String
    unsubscribe: Boolean
    unsubscribeData: AWSJSON
    credits: Int @auth(rules: [
        {allow: groups, groups: ["Admin"]}
        {allow: groups, groups: ["Reader"], operations: [create]}
        {allow: owner, ownerField: "sub", operations: [read]}
        {allow: public, provider: iam}
    ])
    refills:   [Refill]   @hasMany(indexName: "byReaderUser", fields:["id"])
    purchases: [Purchase] @hasMany(indexName: "byReaderUser", fields:["id"])
    bookLikes: [BookLike] @hasMany(indexName: "byReaderUser", fields:["id"])
    bookRatings: [BookRating] @hasMany(indexName: "byReaderUser", fields:["id"])
    followAuthors: [FollowAuthor] @hasMany(indexName: "byReaderUser", fields:["id"])
    notifyFollowers: [NotifyFollower] @hasMany(indexName: "byReaderUser", fields:["id"])
}

type Token{
    device: String
    token: String
}

type Refill @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner,  ownerField: "sub",  operations: [read]}
    {allow: public, provider: iam}
])
{
    id: ID!
    sub: String
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    paymentType: String
    paymentId: String
    payload: AWSJSON
    response: AWSJSON
    confirmation: AWSJSON
    amount: Int
    status: String
    transfered: Boolean
}

type Purchase @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub", operations: [read]}
    # {allow: owner, ownerField: "sub",       identityClaim: "readerREF", operations: [create, read]}
    # {allow: owner, ownerField: "authorSub", identityClaim: "authorREF", operations: [create, read]}
    {allow: public, provider: iam}
]) {
    id: ID!
    sub: String
    authorSub: String
    status: PurchaseStatus
    unused: String
    rating: Int @auth (rules: [
        {allow: groups, groups: ["Admin"]}
        {allow: groups, groups: ["Reader"], operations: [create]}
        {allow: owner, ownerField: "sub", operations: [read, update]}
    ])
    current: AWSJSON
    result: AWSJSON # in case of fail
    identity: String # identity pool id of the buyer
    buyer: String # to show something to author
    epub: AWSJSON
    bookVersion: String # remember which one it was
    bookUpdate:String
    amount: Int
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    bookID: ID @index(name: "byBook")
    book: Book @belongsTo(fields: ["bookID"])
    purchasedContents: [PurchasedContent] @hasMany(indexName: "byPurchase", fields:["id"])
    paymentID: ID @index(name: "byPayment")
    payment: Payment @belongsTo(fields: ["paymentID"])
}


enum PurchaseStatus {
    Author, # if reader is author, in case
    Pending,
    Validated,
    Failed,
    NoCredit
}

# published content
type PurchasedContent @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: owner, ownerField: "sub", operations: [read]}
])
{
    id: ID! @primaryKey
    sub: String
    order: Int
    label: String
    title: String
    text: String
    audio: String
    audioData: AWSJSON
    tempURL: String
    bookContentID: String # no relation needed here
    purchaseID: ID @index(name: "byPurchase")
    purchase: Purchase @belongsTo(fields: ["purchaseID"])
}

type BookRating @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub"}
    # {allow: owner, ownerField: "sub",       identityClaim: "readerREF", operations: [create, read, delete]}
    # {allow: owner, ownerField: "authorSub", identityClaim: "authorREF", operations: [read]}
])
{
    id: ID!
    sub: String
    authorSub: String
    bookVersion: String
    bookUpdate:String
    rating: Int
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    bookID: ID @index(name: "byBook")
    book: Book @belongsTo(fields: ["bookID"])
}

type BookLike @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub"}
    # {allow: owner, ownerField: "sub",       identityClaim: "readerREF", operations: [create, read, delete]}
    # {allow: owner, ownerField: "authorSub", identityClaim: "authorREF", operations: [read]}
])
{
    id: ID!
    sub: String
    authorSub: String
    bookVersion: String
    bookUpdate:String
    like: Boolean
    status: String
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    bookID: ID @index(name: "byBook")
    book: Book @belongsTo(fields: ["bookID"])
}

type FollowAuthor @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["Reader"], operations: [create]}
    {allow: owner, ownerField: "sub"}
    # {allow: owner, ownerField: "sub",       identityClaim: "readerREF", operations: [create, read, delete]}
    # {allow: owner, ownerField: "authorSub", identityClaim: "authorREF", operations: [read]}
])
{
    id: ID!
    sub: String
    authorSub: String
    like: Boolean
    status: String
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    authorID: ID @index(name: "byAuthor")
    author: Author @belongsTo(fields: ["authorID"])
}

type NotifyFollower @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: owner, ownerField: "sub"}
    # {allow: owner, ownerField: "sub",       identityClaim: "readerREF", operations: [create, read, delete]}
    # {allow: owner, ownerField: "authorSub", identityClaim: "authorREF", operations: [read]}
])
{
    id: ID!
    sub: String
    authorSub: String
    status: String
    readerUserID: ID @index(name: "byReaderUser")
    readerUser: ReaderUser @belongsTo(fields: ["readerUserID"])
    authorID: ID @index(name: "byAuthor")
    author: Author @belongsTo(fields: ["authorID"])
    bookID: ID @index(name: "byBook")
    book: Book @belongsTo(fields: ["bookID"])
}

type Payment @model
@auth (rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: owner, ownerField: "sub", operations: [read]}
])
{
    id: ID!
    sub: String #author
    amount: Float
    made: Boolean
    parameters: AWSJSON
    transactionType: String
    transactionId: String
    note: String
    date: AWSDate
    purchases: [Purchase] @hasMany(indexName: "byPayment", fields:["id"])
}

type Family @model
@auth(rules: [
    { allow: groups, groups: ["Admin"]}
    { allow: groups, groups: ["Reader"], operations: [read]}
    { allow: groups, groups: ["Author"], operations: [read]}
    # { allow: public, operations: [read]}
])
{
    id: ID! @primaryKey
    name: String
    title: AWSJSON
    description: AWSJSON
    icon: String
    iconKeys: AWSJSON
    content: AWSJSON
    parameters: AWSJSON
    appVersion: Int
    active: Boolean
    drafts: [Draft] @hasMany(indexName: "byFamily", fields:["id"])
    books: [Book]  @hasMany(indexName: "byFamily", fields:["id"])
    categories: [Category] @hasMany(indexName:"byFamily", fields:["id"])
    subCategories: [SubCategory]  @hasMany(indexName: "byFamily", fields:["id"])
}

type Category @model
@auth(rules: [
    { allow: groups, groups: ["Admin"]}
    { allow: groups, groups: ["Reader"], operations: [read]}
    { allow: groups, groups: ["Author"], operations: [read]}
    # { allow: public, operations: [read]}
])
{
    id: ID! @primaryKey
    name: String
    title: AWSJSON
    description: AWSJSON
    content: AWSJSON
    order: Int
    parameters: AWSJSON
    familyID: ID! @index(name: "byFamily")
    family: Family @belongsTo(fields: ["familyID"])
    active: Boolean
    drafts: [Draft] @hasMany(indexName: "byCategory", fields:["id"])
    books: [Book]  @hasMany(indexName: "byCategory", fields:["id"])
    subCategories: [SubCategory]  @hasMany(indexName: "byCategory", fields:["id"])
}

type SubCategory @model
@auth(rules: [
    { allow: groups, groups: ["Admin"]}
    { allow: groups, groups: ["Reader"], operations: [read]}
    { allow: groups, groups: ["Author"], operations: [read]}
    # { allow: public, operations: [read]}
])
{
    id: ID! @primaryKey
    name: String
    title: AWSJSON
    description: AWSJSON
    content: AWSJSON
    order: Int
    parameters: AWSJSON
    active: Boolean
    familyID: ID! @index(name: "byFamily")
    family: Family @belongsTo(fields: ["familyID"])
    categoryID: ID! @index(name: "byCategory")
    category: Category @belongsTo(fields: ["categoryID"])
    drafts: [Draft] @hasMany(indexName: "bySubCategory", fields:["id"])
    books: [Book]  @hasMany(indexName: "bySubCategory", fields:["id"])
}


#--------------Schema graphql app-education--------------#

type School @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
])
{
    id: ID! @primaryKey
    title: String
    phoneNumber: String
    fixeNumber: String
    description: String
    address: String
    students: [Student] @hasMany(indexName: "bySchool", fields: ["id"])
    toTeachs: [ToTeach] @hasMany(indexName: "bySchool", fields: ["id"])
	schoolUsers: [SchoolUser] @hasMany(indexName: "bySchool", fields: ["id"])
}


type SchoolUser @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
	{allow: groups, groups: ["SchoolFounder"]}
    {allow: owner, ownerField: "sub", operations: [update,read,delete]}
    {allow: owner, ownerField: "schoolREF", identityClaim: "schoolREF", operations: [update,read,delete]}
])
{
    id:ID! @primaryKey
    sub: String
    firstName: String
    lastName:String
    email: AWSEmail
    phoneNumber: String
    address: String
    status: String
    schoolREF: String
    schoolID: ID! @index(name: "bySchool")
    school: School @belongsTo(fields: ["schoolID"])
}


type Student @model
@auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
])
{
    id: ID! @primaryKey
    firstName: String
    lastName: String
    phoneNumber: String
    email: AWSEmail
    matricule: String
    birthday: AWSDate
    address: String
    schoolID: ID! @index(name: "bySchool")
    school: School @belongsTo(fields: ["schoolID"])
    studentGroupID: ID! @index(name: "byStudentGroup")
    studentGroup: StudentGroup @belongsTo(fields: ["studentGroupID"])
    schoolSubscriptions: [SchoolSubscription]@hasMany(indexName: "byStudent", fields: ["id"])
}


type SchoolYear @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    title: String
    description: String
    schoolSubscriptions: [SchoolSubscription] @hasMany(indexName: "bySchoolYear", fields: ["id"])
}


type SchoolSubscription @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    title: String
    amount: String
    dateStart: AWSDate
    dateEnd: AWSDate
    studentID: ID! @index(name: "byStudent")
    student: Student @belongsTo(fields: ["studentID"])
    schoolYearID: ID! @index(name: "bySchoolYear")
    schoolYear: SchoolYear @belongsTo(fields: ["schoolYearID"])
}


type Teacher @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read,create,update]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    firstName: String
    lastName: String
    phoneNumber: String
    email: AWSEmail
    sphoneNumber: String
    address: String
    courses: [Course] @hasMany(indexName: "byTeacher", fields: ["id"])
    liveCourses: [LiveCourse] @hasMany(indexName: "byTeacher", fields: ["id"])
    toTeachs: [ToTeach] @hasMany(indexName: "byTeacher", fields: ["id"])
}


type StudentGroup @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"]}
    {allow: groups, groups: ["Teacher"], operations: [read]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    title: String
    description: String
    students: [Student] @hasMany(indexName: "byStudentGroup", fields: ["id"])
    courses: [Course] @hasMany(indexName: "byStudentGroup", fields: ["id"])
    liveCourses: [LiveCourse] @hasMany(indexName: "byStudentGroup", fields: ["id"])
}


type Course @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read,create,update]}
    {allow: groups, groups: ["Teacher"], operations: [read,create,update]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    title: String
    docs: String
    description: String
    teacherID: ID! @index(name: "byTeacher")
    teacher: Teacher @belongsTo(fields: ["teacherID"])
    studentGroupID: ID! @index(name: "byStudentGroup")
    studentgroup: StudentGroup @belongsTo(fields: ["studentGroupID"])
}


type LiveCourse @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read,create,update]}
    {allow: groups, groups: ["Teacher"], operations: [read,create,update]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    title: String
    dateStart: AWSDate
    dateEnd: AWSDate
    status: String
    teacherID: ID! @index(name: "byTeacher")
    teacher: Teacher @belongsTo(fields: ["teacherID"])
    studentGroupID: ID! @index(name: "byStudentGroup")
    studentGroup: StudentGroup @belongsTo(fields: ["studentGroupID"])
}


type ToTeach @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: groups, groups: ["SchoolFounder"], operations: [read,create,update]}
    {allow: groups, groups: ["Teacher"], operations: [read,create,update]}
    {allow: groups, groups: ["Reader"], operations: [read]}
]){
    id: ID! @primaryKey
    status: String
    date: String
    teacherID: ID! @index(name: "byTeacher")
    teacher: Teacher @belongsTo(fields: ["teacherID"])
    schoolID: ID! @index(name: "bySchool")
    school: School @belongsTo(fields: ["schoolID"])
}

#----------Schema graphql commandes services reading--------------#
#Product
type Product @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    { allow: public, provider: iam }
    
]){
  id: ID! @primaryKey
  title: String
  description: String
  #coverFile: S3Object
  #createdOn: AWSDateTime!
  #updatedOn: AWSDateTime!*
  prices: [Price] @hasMany(indexName: "byProduct", fields: ["id"])
  orderLines: [OrderLine] @hasMany(indexName: "byProduct", fields: ["id"])
}
#Price
type Price @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: public, provider: iam}
]){
  id: ID! @primaryKey
  title: String!
  amount: Int
  description: String
  ProductID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["ProductID"])
}
#Customer
type Client @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: public, provider: iam}
]){
    id: ID! @primaryKey
    firstName: String
    lastName: String
    phoneNumber: String
    email: AWSEmail
    sphoneNumber: String
    address: String
    orders: [Order] @hasMany(indexName: "byClient", fields: ["id"])
    #createdOn: AWSDateTime!
    #updatedOn: AWSDateTime!
}
#Order
type Order @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: public, provider: iam}
]){
  id: ID! @primaryKey
  title: String
  description: String
  amount: Int
  #orderFile: S3Object
  ClientID: ID! @index(name: "byClient")
  client: Client @belongsTo(fields: ["ClientID"])
  orderLines: [OrderLine] @hasMany(indexName: "byOrder", fields: ["id"])
  #createdOn: AWSDateTime!
  #updatedOn: AWSDateTime!
}
#OrderLine
type OrderLine @model @auth(rules: [
    {allow: groups, groups: ["Admin"]}
    {allow: public, provider: iam}
]){
  id: ID! @primaryKey
  amount: Int
  productID: ID! @index(name: "byProduct")
  product: Product @belongsTo(fields: ["productID"])
  orderID: ID! @index(name: "byOrder")
  order: Order @belongsTo(fields: ["orderID"])
}

##Paramètres du site web